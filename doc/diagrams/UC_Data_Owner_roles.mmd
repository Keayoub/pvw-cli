flowchart TB
  %% ====== COLOR PALETTE ======
  classDef nodePrimary fill:#e9f2ff,stroke:#1f6feb,stroke-width:3px,color:#0b2e66,rx:8px,ry:8px;
  classDef nodeNeutral fill:#f5f7f9,stroke:#6e7781,stroke-width:3px,color:#2b3137,rx:8px,ry:8px;
  classDef nodeGloss fill:#e8f5e9,stroke:#2e7d32,stroke-width:3px,color:#1b5e20,rx:8px,ry:8px;
  classDef nodeEnforce fill:#fff3e0,stroke:#ef6c00,stroke-width:3px,color:#e65100,rx:8px,ry:8px;
  classDef nodeFlow fill:#f3e8ff,stroke:#7c3aed,stroke-width:3px,color:#4c1d95,rx:8px,ry:8px;
  classDef nodeMon fill:#e0f7f7,stroke:#0d9488,stroke-width:3px,color:#0f766e,rx:8px,ry:8px;

  linkStyle default stroke:#6e7781,stroke-width:2px;

  %% ====== COLLECTIONS ======
  subgraph sg_root["Microsoft Purview Root Collection"]
    direction TB
    subgraph sg_domain["Domain Collection: “Energy"]
      direction TB
      subgraph sg_prod_a["Sub-Collection: “Product A”"]
        direction TB
        a_cur["Data Curator: Owner A"]:::nodeNeutral
        a_rbac["RBAC: Restricted to Owner A"]:::nodeNeutral
      end
      subgraph sg_prod_b["Sub-Collection: “Product B”"]
        direction TB
        b_cur["Data Curator: Owner B"]:::nodeNeutral
        b_rbac["RBAC: Restricted to Owner B"]:::nodeNeutral
      end
    end
  end

  %% Tint subgraphs
  style sg_root fill:#e9f2ff,stroke:#1f6feb,stroke-width:2px,color:#0b2e66
  style sg_domain fill:#f7fbff,stroke:#1f6feb,stroke-width:2px,color:#0b2e66
  style sg_prod_a fill:#f0f6ff,stroke:#1f6feb,stroke-width:2px,color:#0b2e66
  style sg_prod_b fill:#f0f6ff,stroke:#1f6feb,stroke-width:2px,color:#0b2e66

  %% ====== GLOSSARY ======
  subgraph sg_gloss["Glossary: Ownership Registry"]
    direction LR
    dp["Data Product"]:::nodeGloss --> own["Owner"]:::nodeNeutral --> stew["Steward"]:::nodeNeutral
  end
  style sg_gloss fill:#e8f5e9,stroke:#2e7d32,stroke-width:2px,color:#1b5e20

  %% ====== ENFORCEMENT ======
  subgraph sg_enforce["Enforcement Layers"]
    direction TB
    m_rbac["Purview RBAC (Metadata)"]:::nodeEnforce
    d_plane["Azure RBAC + Storage ACLs (Data Plane)"]:::nodeEnforce
  end
  style sg_enforce fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,color:#e65100

  %% ====== WORKFLOW ======
  subgraph sg_flow["Workflow"]
    direction LR
    req["Access Request"]:::nodeFlow --> pauto["Power Automate"]:::nodeNeutral --> val["Validate Owner"]:::nodeNeutral
  end
  style sg_flow fill:#f3e8ff,stroke:#7c3aed,stroke-width:2px,color:#4c1d95

  %% ====== MONITORING ======
  subgraph sg_mon["Monitoring"]
    direction LR
    ins["Purview Insights"]:::nodeMon --> sent["Sentinel Alerts"]:::nodeNeutral
  end
  style sg_mon fill:#e0f7f7,stroke:#0d9488,stroke-width:2px,color:#0f766e

  %% ====== RELATIONS ======
  sg_domain -->|Uses| sg_gloss
  sg_gloss -->|Feeds policies| sg_enforce
  req -.-> sg_enforce
  sg_enforce -.Policy propagation.-> sg_domain
  sg_mon -.Observes.-> sg_domain

  %% Edge styling by index (based on order above):
  %% 1: sg_domain→sg_gloss, 2: sg_gloss→sg_enforce, 3: req→sg_enforce, 4: sg_enforce→sg_domain, 5: sg_mon→sg_domain
  linkStyle 3 stroke:#7c3aed,stroke-width:2px,stroke-dasharray:6 4;
  linkStyle 4 stroke:#ef6c00,stroke-width:2px,stroke-dasharray:6 4;
  linkStyle 5 stroke:#0d9488,stroke-width:2px,stroke-dasharray:6 4;
